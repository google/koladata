// THIS FILE IS AUTOGENERATED. DO NOT EDIT.
// NOLINTBEGIN
// Build target:
// //py/koladata/serving/testing:cc_test_functors

#include <string>

#include "py/koladata/serving/embedded_slices_internal.h"
#include "koladata/serving/slice_registry.h"
#include "absl/base/no_destructor.h"
#include "absl/container/flat_hash_map.h"
#include "absl/status/statusor.h"
#include "absl/strings/string_view.h"
#include "koladata/data_slice.h"
#include "arolla/util/init_arolla.h"


namespace koladata_serving_test {

const absl::StatusOr<
    absl::flat_hash_map<std::string, ::koladata::DataSlice>>&
TestFunctors() {
  constexpr absl::string_view data(
      "\x83\xaf\x70\xd1\x0d\x88\x4a\x3f\x00\x00\x00\x00\x00\x00\x00\x00\x40\x00\x00\x00\x00\x00\x00\x00\x91\xba\xc2\x3c\x92\x87\xe1\xa9\x00\x00\x00\x00\x00\x00\x00\x00\xe1\x9f\x13\xc0\xe9\xb1\xc3\x72\x73\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x92\x9b\x8e\x0f\x24\x20\x6e\xd7\x98\x06\x00\x00\x00\x00\x00\x00\xe2\x88\xcd\x88\x89\xba\xaf\xbe\x72\x61\x00\x00\x00\x00\x00\x00\xf7\x0c\x00\x00\x00\x00\x00\x00\x62\x5c\x63\x1b\x62\x00\x00\xc4\xa7\xdf\x26\xa6\xef\x23\x6a\x09\x26\x75\xb7\x50\xb3\xa5\x40\x09\xad\x54\xc0\xd5\xe6\xf1\x7e\x5a\x26\x81\xc5\x84\x3a\xea\xba\x0e\xed\x19\xa2\x4b\x07\x97\x80\xbb\xe7\xd2\x39\x5a\x00\x07\x58\xe0\x34\x70\x93\xc3\xcd\x92\x0d\x62\xec\xaf\x6c\x99\xfd\xc0\x6d\xdc\xd4\x2d\x3f\x9c\xc3\x84\x4d\xd3\x84\x24\xd2\xc1\x49\x01\xbe\x44\x8c\xf2\xcf\x39\x0c\x05\xf7\x19\x1b\xf6\x0c\x11\xd5\xa4\x1e\x00\x34\x73\x40\xb9\xb1\x3f\xf7\xa3\x8c\x26\x14\x51\xa4\xa5\x21\x33\x55\xda\x68\x56\x87\x99\xcc\x03\x51\x96\x3b\x76\x9e\x1a\x81\x88\xd1\x9e\x5a\xba\x78\x6b\xea\xa1\x39\x5f\x98\xc9\xfc\x10\xd3\x72\xc7\xce\x5f\x2b\x10\xb1\xda\x59\x3b\xeb\xfe\xd5\xa7\x44\x8f\xc1\x64\xfb\xc1\x48\xb2\xca\xb6\x02\x0f\xd9\x08\xf6\x29\x59\x4a\xd6\xdb\x54\xbf\xf9\x5e\x7c\x46\xa0\xd8\x1e\xc4\xaa\x49\xe6\xa5\x0b\xa0\x4e\xb6\x6f\x76\x45\xca\x36\x66\xba\x75\x29\x81\x0d\x38\xf7\x24\x78\xb2\xde\xb6\xa7\x82\x08\x3a\x5c\x8e\xe7\x73\x4e\x89\xa0\x67\x04\x69\x32\x97\xb2\xcb\xe4\x03\x09\xc3\xc2\x91\x6d\x3a\xc0\xcb\x75\x80\x42\xdb\x0f\x8c\x90\xa9\x25\xba\x52\x90\x33\x60\x5d\xed\x7a\x4e\x60\x85\xda\x6d\x48\x17\xfa\x95\xf4\x64\xfb\xa4\x04\xa5\xef\x74\x13\xab\x31\x71\xcd\xfb\x51\xa4\xf0\x03\x2d\x7d\xe0\xa3\xdd\x40\x06\x18\x89\xd5\xa5\xd1\x45\x7d\x74\x8e\xbe\x72\x11\x05\x36\xc1\x81\x9c\xc9\x82\x67\x9b\xa3\x26\x6f\x38\x05\xc1\xa6\xb8\x52\xa6\x6e\xc3\x76\x0e\x97\x7b\xd1\x2a\xd8\x14\x2c\xe5\xa9\xac\x04\x43\x12\xac\x55\x10\x54\x39\x6d\x46\xcb\x04\x4b\x70\xc1\x67\xd8\x58\x1b\xe4\x8e\x2c\xd1\x15\xb1\xcf\x7b\xea\xb6\xd4\x47\x7f\x09\x4f\x65\x1c\x26\x7a\xb8\x1a\x34\xf4\xf4\x00\x48\x08\x04\x91\x00\x08\x80\xa3\x31\xb7\xf9\xed\x66\xbf\x9b\xe2\x22\x9d\x50\xe8\xe6\x89\x0c\x95\x44\x74\x4d\x66\x36\x30\x4e\x47\x87\xb4\xd0\xd6\xe6\x84\x84\x24\x84\xa6\xbc\x2a\xf2\x76\x22\xd2\x93\x98\x3c\xb6\xa6\xb6\x8c\xb2\xc2\x00\x09\x57\x8e\xaf\x72\xad\x25\x54\x55\xed\x80\xe9\xbe\xec\x06\x28\x89\xc9\x2d\x93\x73\x13\x1e\x85\x21\x35\xa1\x66\xec\xdc\x6c\xcd\x32\x5c\xbe\xc2\xd6\x13\x04\x79\x36\x4d\x46\xab\xa4\x1d\x1e\xbe\x8c\x7f\x68\xb9\xf9\xa1\x73\xfc\x66\x12\x1b\xec\xb5\x0b\xcc\xfa\xd8\x7d\xa3\xf5\x35\x84\xb9\x71\xa0\xd1\x6b\x7a\xfe\x20\x86\x8d\x3d\xcc\xd3\x3f\x06\x02\xa4\xd7\x6b\x57\x95\xe6\xa1\xb4\x2b\xe9\x05\x1b\xe6\xb8\x77\xdc\x1f\xe8\x3c\x4f\x93\xd7\xf6\x3e\xbd\xbf\x8e\xeb\xfb\xb0\x49\x7f\x75\x35\xe8\xb0\x3d\xc4\x2a\xf7\xa5\xfc\x32\x1c\x49\xf5\x64\x80\xd9\xef\xb8\x21\x23\xbd\xc0\xfc\xb7\xc1\xa5\x0c\x50\xca\x4c\x11\x4c\x38\x82\xe9\xbf\xab\xeb\xa7\x29\x50\xe1\x20\xac\x91\x3a\x1a\x5c\xd7\x30\xea\xa5\xc9\x30\x9a\xb9\x37\x9b\xa9\x2a\x82\x04\x12\x1c\x78\x2a\x89\xa4\x70\x06\xa6\x9e\x6f\x28\x9a\x65\x2a\xc1\x7e\x2d\x34\x75\x9f\xab\x02\xca\xbc\x82\xac\x18\x06\x1b\xfd\xa0\x66\x36\xa8\x75\xf8\xa8\x8d\x3a\xe7\x7f\x8a\x77\x03\x60\x07\xce\xa4\xd7\xa6\xe5\x93\x8b\x1e\x26\xf1\x7f\xb8\xc9\x1e\x13\x7b\xb3\x6e\x87\x81\xfa\xae\xb3\xf6\x77\x44\xe6\x6e\x6f\x98\xfb\x4e\xcd\xb7\xab\x75\xb0\x10\xcd\xb4\xed\x46\x07\x4b\x0a\x46\xcb\xf2\x7f\xaa\xd9\x57\x7b\x33\xfb\x13\x66\x33\xca\x65\xe3\x52\xe9\xf0\xd2\x5b\x26\xc9\x4b\xec\x9a\x3d\x0d\xd6\xd5\x77\xb5\x68\x1f\x6a\x3e\xb1\x75\x3d\x79\x84\xa3\x49\x82\x33\x54\x41\x4b\x3a\x0d\xd6\xa1\x8a\x93\x37\x65\x9f\x62\x56\x0b\x4a\xa7\x19\xa2\xaa\x13\xb6\x2f\x0d\xa7\xe8\xc2\x92\x9b\xcc\x72\xb5\x54\xe3\x55\x66\x41\x99\x29\x96\xdf\x67\xb0\x45\x63\xe7\xf3\xf3\xc0\x68\x18\xe9\xbf\xe7\xc1\xc9\xad\x4a\x22\xe6\xa8\x09\x90\x6e\xc3\x14\xce\x43\x9a\x53\xb7\x76\x8d\x61\xe1\x18\xb5\x35\xdd\x6c\x3d\x66\xe6\x4d\x3b\x0e\xfa\x9e\x5b\x8d\xf6\xf1\x91\xe3\x29\xac\x8a\x73\x4d\x09\xb1\x39\x9f\x97\x76\x48\xbc\x77\x1d\x06\x0e\xa5\x59\x69\x4b\x27\x73\x8e\x1e\xfe\x1b\xcb\x08\xcf\x66\x68\xba\x6b\x37\xdb\x84\xa0\xcc\x1c\x54\xb0\xbf\x47\x5e\x60\x12\x6e\x40\xf0\x02\x75\xfd\x55\x09\x6e\x24\xf1\xfb\x81\x20\xc2\x23\xae\x37\x37\xe2\x8b\x01\x32\x8c\xf0\x1a\x1d\xe1\x73\x50\x14\x44\xf1\xd2\x32\x08\x01\x24\x08\x4a\x8c\x0c\xc9\x88\x0d\xab\x9f\x01\xaf\x26\x64\xa3\xa5\x62\x1c\xac\xad\x92\x32\x14\x57\x8e\x83\x34\x14\x29\xfb\xa1\x8c\x51\xb8\x4b\xe2\xa4\xcc\x36\xec\xaa\x4d\xfd\xfd\x7f\xc9\x8e\xaa\x6e\xe6\x8e\x5a\x8a\xf9\xd0\xd3\xb1\xb6\x1a\x3a\x6e\xc0\x12\xf7\x00\x81\x77\x29\xea\x65\x62\x7b\x10\xe3\xa4\x4a\x56\x54\xc1\xc1\xb7\x64\xd8\xab\x8b\xba\xf3\x51\xac\x5f\xdc\x4c\xd6\xc7\xe7\x3a\x47\xf0\x37\x3d\xa5\x32\x38\xaf\x9e\x92\xd3\xcf\xac\xfc\x2b\xa3\x9d\xf5\xf2\x4e\xde\xda\x3c\xf2\x36\xc4\x1e\x8d\x07\x03\x80\xb3\xb3\xfc\xa6\xf3\x3f\x6a\x0e\x0e\x4f\x2c\x85\xae\xc3\x6b\x4b\xed\x1b\x70\xf9\xee\xe1\xba\x36\x3c\xfd\xf7\x0f\x24\xa9\xff\xb6\xbf\xae\xc6\x1e\xae\x7f\xfb\xc0\xb3\xda\x97\xd7\x54\xd3\xbb\x82\xce\x16\xfc\x07\x0f\xe6\x72\x31\x89\x26\xb1\x4e\x62\xd1\x07\x2a\x02\x8d\x07\x82\xf3\x7c\x94\xfe\x36\xcd\x31\x45\xfe\xb7\xf6\xdf\x5e\x44\x3a\x1b\xde\x80\x24\xbc\x57\x5d\xcf\x3b\x0b\x1f\x5b\x2b\xc0\x1f\x3c\x90\xeb\xec\xa3\x5d\xbb\x3e\x64\x16\xfd\x80\x9d\x13\x1c\x52\x08\x9f\xdd\x6f\xec\xaf\x5a\x7b\x9c\xcb\xf0\x33\x55\x6f\x24\xb9\x0a\x0d\x3f\x78\x10\xf2\xbd\x3e\xb3\xb5\xb5\x13\xda\xac\xd7\x04\x9d\xb3\x84\xb5\x78\xb1\xfa\x29\x40\xdc\xfb\x8d\x17\xe6\xd6\x4d\xba\x68\x1b\x2e\x97\x0c\x92\x19\x09\x35\x25\x5f\xdd\xc0\x3a\x48\x19\xbd\x80\xa3\xf3\x36\x4b\x70\x21\xd1\xe8\x56\x27\xb1\x2e\x52\xa3\xe2\xd5\xce\x4b\xdc\x60\xf3\x9f\xe0\x09\x40\x4e\x15\xa0\x04\x06\x2a\x20\x50\x83\x06\xb4\xa0\x83\x00\xe8\x30\x60\x16\x52\x28\x87\x15\x4e\x11\x14\x49\x51\x70\xe0\xc2\x93\xba\xfb\x2d\x70\x3e\x02\xe0\x50\x04\x73\xc0\xcf\x9e\xc1\x84\x29\xb1\xa0\x76\x11\x8c\xd3\xa9\x21\x14\xdc\x69\x84\x2b\x8f\x2c\x75\xd1\x81\xa3\x10\xfc\x86\x8b\x04\x9c\x29\x49\x40\xde\x59\x76\xe0\xcd\x5e\x08\xc9\x08\x8b\x74\x16\x13\x91\x1e\x83\x12\xc8\xd7\xbd\x98\xdc\xd8\x2d\x7a\x59\x90\x78\x30\x98\x01\x99\x61\xf8\x01\x6d\x4e\x95\x78\x63\x0c\x22\xa0\x71\xbd\xc0\xdc\x04\x71\x2e\x89\x49\x0d\xb2\x01\x90\x08\x97\x44\x9e\x2a\x08\x12\xdb\x2e\x61\xbc\x81\x19\x9b\x62\x0c\x3d\x4f\xee\x0f\x6b\x6a\xde\xfc\x46\x27\x1c\x3d\x7d\xde\x8e\xbf\xd9\xf7\xe7\xb8\x4c\x65\xa0\x77\xbd\x8c\x0b\x23\xa4\x59\x12\x53\x1b\x34\x57\xbd\x6c\x09\x23\xbc\xa6\x66\x5a\x83\xce\x1a\x88\x40\xcf\xa2\x77\x36\x40\x2a\x05\x19\xc4\x15\xbd\x16\xd1\x0f\x61\xc3\x62\xc2\x1f\x6e\xfc\xc9\xe0\x67\x37\xb7\x38\xfd\x78\x66\x3d\x03\x12\x26\x6e\xe3\xc9\xe5\x9b\xc6\xd4\x05\x70\x9c\xc4\x4a\x7b\x6b\x7f\x76\xa0\xb5\x41\xd7\xff\xf8\xe3\x4c\xa7\x61\xf0\x69\x5d\xa2\x7b\x77\x72\x2a\x7d\x36\x67\x7b\x47\xef\xb9\x95\xa3\x99\xdd\x3b\x7f\x95\xab\x08\x3b\x2a\x32\x6b\xc8\x98\x9f\x2c\x23\xc0\x46\x44\x22\x25\xbc\x5a\x36\xc3\x99\x89\x51\x11\x59\x20\x10\xc5\x00\x09\x70\xc1\x73\x64\x73\x65\xf3\x62\xf2\x53\xea\x2f\x5d\x71\xf1\x29\x8e\xbf\x8c\x04\x82\x42\x8b\x2c\x8f\xd8\xa2\x8f\x6c\xb1\xbf\x69\x8e\x8c\x80\x7d\xc1\x24\xf8\x08\x10\xc2\xd3\x98\xe9\xa8\xbd\x6c\x0e\x4b\xf5\x06\x84\xd6\xc0\x3e\x55\xae\xdc\x08\xb9\x51\xaa\xc5\xa8\x16\xa3\x54\x84\xba\x23\xfe\x4f\xc4\x43\xd9\x28\x78\x4c\x4b\x4c\x31\xd4\xf5\xad\x25\xa6\x18\xc0\xfa\xd6\x12\x53\x4c\x81\xbf\xd3\x90\x91\xc8\x44\xe9\x32\xdb\x03",  // golden_test:ignore
      1792);  // golden_test:ignore
  static const absl::NoDestructor result(
      ::koladata::serving::embedded_slices_internal::ParseEmbeddedSlices(data));
  return *result;
}

absl::StatusOr<::koladata::DataSlice>
TestFunctors(absl::string_view name) {
  const auto& slices = TestFunctors();
  if (!slices.ok()) {
    return slices.status();
  }
  return ::koladata::serving::embedded_slices_internal::GetEmbeddedSlice(
      *slices, name);
}

AROLLA_INITIALIZER(
    .deps = {
        ::arolla::initializer_dep::kOperators,
        ::arolla::initializer_dep::kS11n,
    },
    .init_fn = []() -> absl::Status {
      ASSIGN_OR_RETURN(const auto& slices, TestFunctors());
      for (const auto& [k, v] : slices) {
        RETURN_IF_ERROR(koladata::serving::RegisterSlice(
            absl::StrCat("//py/koladata/serving/testing:cc_test_functors@", k), v));
      }
      return absl::OkStatus();
    });
}  // namespace koladata_serving_test
// NOLINTEND

