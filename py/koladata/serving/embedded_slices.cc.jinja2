{# jinja2 file itself is NOT auto generated. -#}
// THIS FILE IS AUTOGENERATED. DO NOT EDIT.
// NOLINTBEGIN
// Build target:
// {{build_target}}

#include <string>

#include "py/koladata/serving/embedded_slices_internal.h"
#include "koladata/serving/slice_registry.h"
#include "absl/base/no_destructor.h"
#include "absl/container/flat_hash_map.h"
#include "absl/status/statusor.h"
#include "absl/strings/string_view.h"
#include "koladata/data_slice.h"
#include "arolla/util/init_arolla.h"

{% for n in namespaces %}
namespace {{n}} {
{%- endfor %}

const absl::StatusOr<
    absl::flat_hash_map<std::string, ::koladata::DataSlice>>&
{{function_name}}() {
  constexpr absl::string_view data(
      "{{ serialized_slices | cescape }}",  // golden_test:ignore
      {{ serialized_slices | count }});  // golden_test:ignore
  static const absl::NoDestructor result(
      ::koladata::serving::embedded_slices_internal::ParseEmbeddedSlices(data));
  return *result;
}

absl::StatusOr<::koladata::DataSlice>
{{function_name}}(absl::string_view name) {
  const auto& slices = {{function_name}}();
  if (!slices.ok()) {
    return slices.status();
  }
  return ::koladata::serving::embedded_slices_internal::GetEmbeddedSlice(
      *slices, name);
}

AROLLA_INITIALIZER(
    .deps = {
        ::arolla::initializer_dep::kOperators,
        ::arolla::initializer_dep::kS11n,
    },
    .init_fn = []() -> absl::Status {
      ASSIGN_OR_RETURN(const auto& slices, {{function_name}}());
      for (const auto& [k, v] : slices) {
        RETURN_IF_ERROR(koladata::serving::RegisterSlice(
            absl::StrCat("{{ build_target }}@", k), v));
      }
      return absl::OkStatus();
    });

{%- for n in namespaces %}
}  // namespace {{n}}
{%- endfor %}
// NOLINTEND

{# end of template #}
