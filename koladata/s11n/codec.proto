// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
syntax = "proto2";

package koladata.s11n;

import "arolla/serialization_base/base.proto";

option cc_enable_arenas = true;

message KodaV1Proto {
  extend arolla.serialization_base.ValueProto {
    optional KodaV1Proto extension = 329924649;
  }

  message ObjectIdProto {
    optional uint64 hi = 1;
    optional uint64 lo = 2;
  }

  message RepeatedPackedObjectIdProto {
    // Packed ids are stored as a diff from the previous id.
    // For example, [10, 11, 12, 13] is stored as [10, 1, 1, 1].
    // Unsigned integer underflow is expected and allowed.
    // It is done to save space.
    repeated uint64 hi = 1 [packed = true];
    repeated uint64 lo = 2 [packed = true];
  }

  message DataItemProto {
    oneof value {
      bool missing = 1;
      ObjectIdProto object_id = 2;
      int32 i32 = 3;
      int64 i64 = 4;
      float f32 = 5;
      double f64 = 6;
      bool boolean = 7;
      bool unit = 8;
      string text = 9;
      bytes bytes_data = 10;
      int32 dtype = 11;
      bool expr_quote = 12;  // stored in ValueProto.input_value_indices[0]
    }
  }

  message DataItemVectorProto {
    repeated DataItemProto values = 1;
  }

  // Size of types_buffer is equal to the size of DataSliceImpl.
  // Each byte stores proto field index of an element (i.e. from 1 for
  // ObjectId, to 11 for ExprQuote).
  // 254 (TypesBuffer::kRemoved) and 255 (TypesBuffer::kUnset) are special
  // values for REMOVED and UNSET.
  // Values are stored in the corresponding repeated fields without gaps.
  //
  // Example:
  //  types_buffer = [2, 4, 255, 2, 7, 11, 4, 4, 254, 11]
  //  i32 = [10, 11]
  //  f32 = [3.1, 3.5, 3.7]
  //  ValueProto.input_value_indices links to [expr1, expr2]
  // The corresponding DataSliceImpl:
  //  [10, 3.1, UNSET, 11, Unit, expr1, 3.5, 3.7, REMOVED, expr2]
  message DataSliceCompactProto {
    optional bytes types_buffer = 255;

    // Field ids must be equal to ScalarTypeId<T>() for corresponding type.
    optional RepeatedPackedObjectIdProto object_id = 1;
    repeated int32 i32 = 2 [packed = true];
    repeated int64 i64 = 3 [packed = true];
    repeated float f32 = 4 [packed = true];
    repeated double f64 = 5 [packed = true];
    repeated bool boolean = 6 [packed = true];
    optional bool unit = 7;  // No stored data.
    repeated string text = 8;
    repeated bytes bytes_data = 9;
    repeated int32 dtype = 10 [packed = true];
    optional bool expr_quote = 11;  // Stored in ValueProto.input_value_indices.
  }

  message DataSliceImplProto {
    oneof value {
       DataItemVectorProto data_item_vector = 1;
       DataSliceCompactProto data_slice_compact = 2;
    }
  }

  // Represents values of some attribute (attribute name not included) for
  // a sequential range of ObjectIds.
  // `values` can be either DataItem (in this case first_object_id is
  // the ObjectId for the item), or DataSliceImpl. In case of DataSliceImpl
  // first_object_id determines allocation and a starting offset in
  // the allocation. Currently offset is always zero, but potentially we can
  // split a huge (> 2GiB) allocation into several chunks and serialize
  // separately.
  message AttrChunkProto {
    optional ObjectIdProto first_object_id = 1;
    // index of DataSliceImpl/DataItem in DataBag's
    // ValueProto.input_value_indices
    // If contains DataItemVectorProto then all missing DataItems are considered
    // REMOVED values. UNSET values can be stored only in DataSliceCompactProto.
    optional int32 values_subindex = 2;
  }

  message AttrProto {
    optional string name = 1;
    repeated AttrChunkProto chunks = 2;
  }

  message DictProto {
    optional ObjectIdProto dict_id = 1;
    // index of keys DataSliceImpl (not DataItem) in
    // DataBag's ValueProto.input_value_indices
    optional int32 keys_subindex = 2;
    // index of values DataSliceImpl (not DataItem) in
    // DataBag's ValueProto.input_value_indices
    optional int32 values_subindex = 3;
  }

  message ListProto {
    optional ObjectIdProto list_id = 1;
    // index of values DataSliceImpl in DataBag's ValueProto.input_value_indices
    optional int32 values_subindex = 2;
  }

  // ValueProto.input_value_indices:
  //     First fallback_count indices are links to fallbacks (DataBagProto)
  //     of this DataBag. Other indices are links to
  //     DataItemProto/DataSliceImplProto referenced in attrs, dicts, lists.
  message DataBagProto {
    optional int32 fallback_count = 1;
    repeated AttrProto attrs = 2;
    repeated DictProto dicts = 3;
    repeated ListProto lists = 4;
  }

  oneof value {
    // Represents koladata::expr::LiteralOperator
    //
    // ValueProto.input_value_indices[0]
    //   -- Wrapped TypedValue.
    bool literal_operator = 1;
    bool ellipsis_value = 2;
    DataItemProto internal_data_item_value = 3;
    DataSliceImplProto data_slice_impl_value = 4;

    DataBagProto data_bag_value = 5;

    // ValueProto.input_value_indices[0]: DataSliceImpl or DataItem
    // ValueProto.input_value_indices[1]: JaggedShape
    // ValueProto.input_value_indices[2]: Schema (DataItem)
    // ValueProto.input_value_indices[3]: (optional) DataBag
    bool data_slice_value = 6;

    // Represents koladata::DataSlice's QType
    bool data_slice_qtype = 10;

    bool ellipsis_qtype = 11;
    bool data_bag_qtype = 12;
    bool non_deterministic_token_qtype = 13;
  }
}
