// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
syntax = "proto2";

package koladata.internal;

import "arolla/serialization_base/base.proto";

// Error for not finding a common schema when creating DataSlice. This is used
// for carrying error information and rendering readable error message to user.
message NoCommonSchema {
  // The most common schema fund in the input.
  optional arolla.serialization_base.ContainerProto common_schema = 1;
  // The conflict schema that cannot be converted to the common schema.
  optional arolla.serialization_base.ContainerProto conflicting_schema = 2;
}

// Error for cases when objects with schema OBJECT are missing
// __schema__ attributes.
message MissingObjectSchema {
  optional arolla.serialization_base.ContainerProto missing_schema_item = 1;
}

// Error when the assigned value has a different schema than the expected one.
message IncompatibleSchema {
  optional string attr = 1;
  optional arolla.serialization_base.ContainerProto expected_schema = 2;
  optional arolla.serialization_base.ContainerProto assigned_schema = 3;
}

// Conflicts when merging two DataBags.
message DataBagMergeConflict {
  message ListConflict {
    optional arolla.serialization_base.ContainerProto list_object_id = 1;
    optional uint64 first_list_size = 2;
    optional uint64 second_list_size = 3;
    optional uint64 list_item_conflict_index = 4;
    optional arolla.serialization_base.ContainerProto first_conflicting_item =
        5;
    optional arolla.serialization_base.ContainerProto second_conflicting_item =
        6;
  }
  message SchemaOrDictConflict {
    optional arolla.serialization_base.ContainerProto object_id = 1;
    optional arolla.serialization_base.ContainerProto key = 2;
    optional arolla.serialization_base.ContainerProto expected_value = 3;
    optional arolla.serialization_base.ContainerProto assigned_value = 4;
  }
  oneof conflict {
    ListConflict list_conflict = 1;
    SchemaOrDictConflict schema_or_dict_conflict = 2;
  }
}

// Koda error message transportation proto.
message Error {
  optional string error_message = 1;
  optional Error cause = 2;
  oneof error {
    NoCommonSchema no_common_schema = 3;
    MissingObjectSchema missing_object_schema = 4;
    IncompatibleSchema incompatible_schema = 5;
    DataBagMergeConflict data_bag_merge_conflict = 6;
  }
}
