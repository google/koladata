// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
edition = "2023";

package koladata.functor.parallel;

// This message contains the configuration for a parallel execution.
//
// The configuration is list of operator replacements. Each operator replacement
// describes the handling of a specific operator in a parallel execution.
//
// For a type X, we define parallel_type[X] as:
// - stream[Y] if X is iterable[Y].
// - tuple[parallel_type[Y1], parallel_type[Y2], ...] when X
//   is tuple[Y1, Y2, ...]
// - namedtuple[foo=parallel_type[Y1], bar=parallel_type[Y2], ...] when X
//   is namedtuple[foo=Y1, bar=Y2, ...]
// - non_deterministic_token if X is non_deterministic_token.
// - an error if X is a future or a stream.
// - future[X] otherwise.
// Note that for tuples/namedtuples, the above rule is applied recursively.
//
// If an operator takes an argument of type X, the parallel version must take
// parallel_type[X] for this argument.
// If an operator returns type Y, the parallel version must return
// parallel_type[Y].
//
// As an exception to the above rule, argument(s) of an operator denoted by
// `literal_argument_indices` must always be a literal and will be passed as is
// to the parallel operator (without converting it to a parallel type). This
// is necessary to support operators that only support literals for a certain
// argument, such as core.get_nth.
//
// Additionally, the operator replacement can specify that we need to pass
// additional arguments to the parallel operator, such as the executor or the
// execution context or the non-deterministic token.
message ExecutionConfig {
  message ArgumentTransformation {
    enum ReplacementArgument {
      NOT_SET = 0;
      ORIGINAL_ARGUMENTS = 1;
      EXECUTOR = 2;
      EXECUTION_CONTEXT = 3;
      NON_DETERMINISTIC_TOKEN = 4;
    }

    // The arguments to pass to the replaced operator.
    // When empty, it means "[original_arguments]".
    repeated ReplacementArgument arguments = 1;
    // The indexes of arguments that must always be a literal. Those arguments
    // will be passed to the replaced operator as is, without converting them
    // to a parallel type. The indexes point to the arguments in the original
    // operator.
    repeated int64 literal_argument_indices = 2;
  }

  // This message describes custom handling for a specific operator in a
  // parallel execution.
  message OperatorReplacement {
    // The name of the operator to replace.
    string from_op = 1;
    // The name of the operator to replace with.
    string to_op = 2;
    // The arguments to pass to the replaced operator.
    ArgumentTransformation argument_transformation = 3;
  }

  repeated OperatorReplacement operator_replacements = 1;
}
